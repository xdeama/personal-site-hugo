.m-\[0\] {
  margin: 0
}

.bg-primary {
  background-color: var(--color-primary-glare);
}

.p-m {
  padding: clamp(1.5rem, 1.43rem + .33vw, 1.6875rem)
}

.pb-m {
  padding-bottom: clamp(1.5rem, 1.43rem + .33vw, 1.6875rem)
}

.pt-s {
  padding-top: clamp(1rem, .96rem + .22vw, 1.125rem)
}

.text-base {
  font-size: clamp(1rem, .96rem + .22vw, 1.125rem)
}

.monospaced {
  font-family: var(--font-mono);
}

.prose {
  --flow-space: var(--space-s-m);

  max-width:62rem;
  line-height: 1.8;
}

.prose p {
  margin-top: var(--flow-space);
}

.no-top-margin > p {
  --flow-space: 0;
}

.prose em {
  color: var(--color-mid);
  font-family: "Noto Sans Bold", serif;
  font-style: normal;
  font-weight: bold;
  /*background-color: var(--chroma-color-highlight);*/
  /*border-radius: 7px;*/
  /*padding: 5px;*/
}

.prose > img,
.prose > table {
  width: 100%;
}

.prose figure img {
  border: 1px dashed var(--color-mid);
  margin-inline: auto;
}

.prose ul {
  list-style: none;
  padding-left: 0;
}

.prose ul li {
  position: relative;
  padding-left: 10px;
}

.prose ul li::before {
  content: '- ';
  color: var(--color-mid);
  font-weight: bold;
  position: absolute;
  left: 0;
}

.prose > svg,
.prose > a > svg {
  width: 10rem;
  height: 10rem;
  display: block;
  margin-top: var(--flow-space);
  margin-right: auto;
  margin-left: auto;
  color: var(--color-dark);
}

.prose > a > svg:hover {
  color: var(--color-primary);
}

.prose :is(ol, ul) {
  padding-inline-start: var(--space-s);
  margin-block-start: var(--space-xs);
}

.prose ol li::marker {
  color: var(--color-mid);
}

.prose li + li {
  margin-top: var(--space-3xs);
}

.list-with-columns > ul {
  column-count: 1;
}

.prose ul li:first-child {
  margin-top: -0.5rem;
}

@media screen and (min-width: 450px) {
  .list-with-columns > ul {
    column-count: 2;
    column-gap: 1rem;
  }
  .prose ul li:first-child {
    margin-top: 0;
  }
}

@media screen and (min-width: 715px) {
  .list-with-columns > ul {
    column-count: 3;
  }
  .prose ul li:first-child {
    margin-top: 0;
  }
}

.list-with-columns > ul > li {
    break-inside: avoid;
}


/* More space after and around certain elements */
/*pre, pre + *, */
.prose :is(figure, figure + *, h2) {
  --flow-space: var(--space-l-xl);
}

/* Less space for items that follow headings */
.prose h1 + * {
  --flow-space: 0.7em;
}

.prose :is(h2 + *, h3 + *, h4 + *) {
  --flow-space: var(--space-s);
}

@media (max-width: 49em) {
  /* break long words */
  .prose > *,
  .prose a {
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-word;
    /* Adds a hyphen where the word breaks, if supported */
    hyphens: auto;
  }
}

@media (min-width: 58em) {
  .prose :is(ul, ol) {
    padding-inline-start: 1.5ch;
  }
}

@media screen and (max-width: 700px) {
  h3 {
    display: flex;
    flex-direction: column;
  }
}

.site-header .repel {
  --gutter: 0.5rem var(--space-m);
  padding-block: var(--space-m);
}

.site-header nav ul {
  margin: 0;
}

.site-header-logo {
  display: inline-block;
  font-size: 1.8rem;
  height: 2.5rem;
  color: var(--color-header-logo);
}

@media screen and (max-width: 50em) {
  .site-header-logo {
    display: none;
  }
}

.flow-space-s {
  --flow-space: var(--space-s);
}

.footer {
  --flow-space: var(--space-m-l);

  max-width: 60rem;
  line-height: 1.8;
  font-size: var(--size-step-0);
  --cluster-horizontal-alignment: center;

  --switcher-vertical-alignment: flex-start;
  --switcher-target-container-width: 45rem;
  --gutter: var(--space-xs)
}

.margin-workaround {
  margin-top: 0;
}

.icon {
  width: 1ex;
  height: 1ex;
}

.profile-img {
  --n: 100;
  --d: 81;
  max-width: 13rem;
  border-radius: 2%;
  display: block;
  margin: 3rem auto;
  box-shadow:
    -50px -50px 0 -35px var(--color-profile-frame),
    50px 50px 0 -35px var(--color-profile-frame);
}

.linkedin-svg {
  display: inline-block;
  transform: translateY(0.14em);
  color: var(--color-linkedIn-logo);
}

.linkedin-svg:hover {
  color: var(--color-primary);
}

.dark-mode-icon {
  display: inline-block;
  font-size: 1rem;
  height: 1.5rem;

  & svg {
    color: var(--color-primary);
    display: inline-block;

    :hover {
      color: var(--color-primary-shade);
    }
  }
}

#dark-mode-toggle {
  background: none;
  border: none;
  cursor: pointer;
}

.chroma {
  border-radius: 1.5em;
}

.grid-list {
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(10rem, 1fr));
  gap: 1rem;
}
